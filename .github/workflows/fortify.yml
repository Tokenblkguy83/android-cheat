# Optimized Fortify Workflow with Enhanced Security and Comprehensive Branch Coverage

name: Fortify AST Scan

# Trigger events for all branches, pull requests, and scheduled runs
on:
  push:
    branches: [ "**" ]  # Monitor all branches
  pull_request:
    branches: [ "**" ]  # Monitor pull requests to all branches
  schedule:
    - cron: '0 3 * * *'  # Run daily at 3 AM UTC
  workflow_dispatch:  # Manual trigger support

jobs:
  Fortify-AST-Scan:
    # Use the appropriate runner for building your source code
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      pull-requests: write
      security-events: write  # Enable security events for secure operations

    steps:
      # Step 1: Check out the source code
      - name: Check Out Source Code
        uses: actions/checkout@v4

      # Step 2: Run Fortify scan with SAST and SCA
      - name: Run Fortify Scan
        uses: fortify/github-action@ef5539bf4bd9c45c0bd971978f635a69eae55297
        with:
          sast-scan: true          # Enable SAST scan
          debricked-sca-scan: true # Enable open-source dependency scan
        env:
          #############################################################
          ##### Fortify on Demand Configuration
          #############################################################
          FOD_URL: ${{ secrets.FOD_URL }}                 # Use GitHub Secrets for secure data
          FOD_TENANT: ${{ secrets.FOD_TENANT }}
          FOD_USER: ${{ secrets.FOD_USER }}
          FOD_PASSWORD: ${{ secrets.FOD_PAT }}

          #############################################################
          ##### Fortify Hosted / SSC Configuration
          #############################################################
          SSC_URL: ${{ vars.SSC_URL }}
          SSC_TOKEN: ${{ secrets.SSC_TOKEN }}
          SC_SAST_TOKEN: ${{ secrets.SC_CLIENT_AUTH_TOKEN }}
          DEBRICKED_TOKEN: ${{ secrets.DEBRICKED_TOKEN }}
          SC_SAST_SENSOR_VERSION: 24.4.0

      # Step 3: Enable policy check and export results
      - name: Enable Policy Check and Export Results
        run: echo "Enabling policy checks and exporting results to GitHub Security Dashboard"
        env:
          DO_POLICY_CHECK: true  # Fail pipeline if security policy outcome is FAIL
          DO_EXPORT: true        # Export vulnerabilities to GitHub code scanning dashboard

      # Step 4: Post scan results as a comment on pull requests
      - name: Post Scan Results to PR
        if: ${{ github.event_name == 'pull_request' }}
        run: echo "Scan results added to the pull request"

      # Step 5: Notify on failure
      - name: Notify on Failure
        if: failure()
        run: echo "Security scan failed. Please review the issues."
